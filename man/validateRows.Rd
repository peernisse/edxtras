% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validateRows.R
\name{validateRows}
\alias{validateRows}
\title{Validate multiple columns in each row of a dataframe}
\usage{
validateRows(df, cols = list(), rulesObj = NULL, ruleset = "default")
}
\arguments{
\item{df}{dataframe whose column values are subjected to validation rules
in combinations}

\item{cols}{Vector of column names to validate}

\item{rulesObj}{List Named list of validation functions}

\item{ruleset}{Character Grouping name of custom ruleset.}
}
\value{
Returns original dataframe with flag column `valid_rows` flags `TRUE`
where all specified columns return TRUE for their
respective validation rules, else `FALSE`.
Default behavior when `rulesObj` is not supplied returns flag column 
`valid_rows` flags `TRUE` when columns in `cols` satisfy `complete.cases()`.
If no `cols` are supplied, all columns are included in the evaluation.
}
\description{
Identify rows in a dataframe where specified columns are all
valid.
}
\examples{
set.seed(42)
df <- data.frame(
    'c1' = seq.Date(as.Date('1974-06-22'), as.Date('2000-06-24'), 'day'),
    'c2' = sample(100:10000, 9500, replace = TRUE),
    'c3' = sample(c('misfit', 'toys', 'island', 'rich', NA_character_), 9500, replace = TRUE),
    'c4' = sample(zipcodes, 9500, replace = TRUE),
    'c5' = sample(zipcodeDB$median_home_value, 9500, replace = TRUE)
)

rulesObj <- validRules(
    list(
        'c1' = function(x) !is.na(x) & is.Date(x),
        'c2' = function(x) x >= 500,
        'c3' = function(x) x \%in\% c('misfit', 'toys', 'island'),
        'c4' = function(x) nchar(x) == 5,
        'c5' = function(x) !is.na(x) & is.numeric(x)
    ),
    ruleset = 'test'
)

# Defaults to `complete.cases()` if `rulesObj` is not supplied

validated_df <- validateRows(df)
head(validated_df)

# Defaults to `complete.cases()` for supplied `cols` if `rulesObj` is not supplied

validated_df <- validateRows(df, cols = c('c4', 'c5'))
head(validated_df)

# Returns rows where all `cols` return TRUE for rules supplied in `rulesObj`

validated_df <- validateRows(
    df, 
    cols = c('c3', 'c4', 'c5'), 
    rulesObj = rulesObj, 
    ruleset = 'test'
)

head(validated_df, 20)

}
\seealso{
Other validation: 
\code{\link{addRules}()},
\code{\link{editRules}()},
\code{\link{makeValidData}()},
\code{\link{validRules}()},
\code{\link{validateColumn}()},
\code{\link{validateDF}()}
}
\concept{validation}
