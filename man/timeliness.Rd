% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/timeliness.R
\name{timeliness}
\alias{timeliness}
\title{Calculate time differences from 2 columns in a dataframe with various outputs}
\usage{
timeliness(
  df,
  fromCol,
  toCol,
  gpBy = NULL,
  FUNS = list(),
  colNames = list(),
  ...
)
}
\arguments{
\item{df}{Dataframe A dataframe containing 2 columns of Date, POSIXct, or 
character coercible to date by `as.Date()`.}

\item{fromCol}{Character Name of the column containing the start dates.}

\item{toCol}{Character Name of the column containing the end dates.}

\item{gpBy}{Character Vector of column names to group by. Ignored if `FUNS` 
is not used.}

\item{FUNS}{List Optional aggregating functions (e.g., mean, median, std, sum...)
or non-aggregating function to be applied to the output of `base::difftime()`.
If grouping with `gpBy` is not used, aggregating functions return single value
result column, and non-aggregating functions (e.g., function(x) x <= 7) 
return rowwise results. If grouping with `gpBy` is used, aggregating functions 
return a single value for each group, non-aggregating functions are ignored and a 
warning is displayed.}

\item{colNames}{List List of characters to use as column names for columns 
created by functions in `FUNS`.}

\item{...}{Additional arguments passed to `base::difftime()`}
}
\value{
Original dataframe with column `timeliness` containing output of 
`base::difftime()`. If argument `FUNS` is used without grouping columns in
`gpBy`, `FUNS` output is propagated in added columns named from values
in `colNames`. If `gpBy` is used and `FUNS` contains aggregating functions 
(e.g., mean), returns summary dataframe with grouping columns and columns defined
by `FUNS` and `colNames`. Non-aggregating functions are ignored if `gpBy`
is used.
}
\description{
Compares 2 date columns in a dataframe. Wraps `base::difftime()` 
though with varying types of output based on arguments used. Supports custom
functions to be applied to output of `base::difftime()`.
}
\examples{
dft <- data.frame(
'group1' = rep(c('A', 'B', "C"), 100),
'group2' = rep(c('F', 'U'), 150),
'd1' = c(seq.Date(as.Date('2023-01-01'), as.Date('2023-10-23'), 'day'), rep(NA_character_, 4))
) \%>\% 
dplyr::mutate(
    d2 = d1 + sample(1:100, 300, replace = TRUE)
)

# Will warn about NAs
out <- timeliness(dft, 'd1', 'd2', units = 'hours')
head(out)
tail(out)

# Removing NAs
d <- dft \%>\% 
dplyr::filter(., !is.na(d1))

out <- timeliness(d, 'd1', 'd2', units = 'hours')
head(out)

suppressWarnings(
    out <- timeliness(dft, fromCol = 'd1', toCol = 'd2',
        FUNS = list(mean,median, function(x) x, function(x) x <= 7),
        colNames = list('mean_timeliness', 'median_timeliness', 
                'time_diff', 'lt_1_week'),
             units = 'days'
    )
)
head(out)

# Using grouping with gpBy argument

out <- timeliness(d, fromCol = 'd1', toCol = 'd2', gpBy = c('group1', 'group2'),
    FUNS = list(mean, median),
    colNames = list('mean_timeliness', 'median_timeliness'),
    units = 'days'
)
head(out)


}
