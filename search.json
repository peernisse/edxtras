[{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://peernisse.github.io/edxtras/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://peernisse.github.io/edxtras/articles/edxtras.html","id":"get-started","dir":"Articles","previous_headings":"","what":"Get Started","title":"edxtras","text":"","code":"library(edxtras)"},{"path":"https://peernisse.github.io/edxtras/articles/edxtras.html","id":"example-use-case","dir":"Articles","previous_headings":"","what":"Example use case","title":"edxtras","text":"Data provided regularly multiple sources tabular format. data required contain certain columns columns complete comply certain rules quality control. need track report quality data delivered source.","code":""},{"path":"https://peernisse.github.io/edxtras/articles/edxtras.html","id":"create-demonstration-data","dir":"Articles","previous_headings":"Example use case","what":"Create demonstration data","title":"edxtras","text":"Let’s create two datasets demonstrate using edxtras accomplish .","code":""},{"path":"https://peernisse.github.io/edxtras/articles/edxtras.html","id":"dataset-1","dir":"Articles","previous_headings":"Example use case > Create demonstration data","what":"Dataset 1","title":"edxtras","text":"","code":"df1 <- edxtras::zipcodeDB[, c('zipcode', 'lat', 'lng', 'post_office_city', 'state')] str(df1) #> 'data.frame':    41877 obs. of  5 variables: #>  $ zipcode         : chr  \"35004\" \"35005\" \"35006\" \"35007\" ... #>  $ lat             : num  33.6 33.6 33.4 33.2 32.9 ... #>  $ lng             : num  -86.5 -87 -87.2 -86.8 -85.9 ... #>  $ post_office_city: chr  \"Moody, AL\" \"Adamsville, AL\" \"Adger, AL\" \"Alabaster, AL\" ... #>  $ state           : chr  \"AL\" \"AL\" \"AL\" \"AL\" ..."},{"path":"https://peernisse.github.io/edxtras/articles/edxtras.html","id":"dataset-2","dir":"Articles","previous_headings":"Example use case > Create demonstration data","what":"Dataset 2","title":"edxtras","text":"","code":"set.seed(42) sampleDates <- seq.Date(as.Date('2020-01-01'), as.Date(Sys.Date() + 100), 'day')  df2 <- data.frame(     'reporter' = sample(c('Rep A', 'Rep B', 'Rep C'), 3000, replace = TRUE),     'description' = sample(         c('short description', 'a slightly longer description', NA), 3000, replace = TRUE     ),     'date' = sample(as.character(sampleDates), 3000, replace = TRUE),     'values' = sample(-100:1000, 3000, replace = TRUE) ) str(df2) #> 'data.frame':    3000 obs. of  4 variables: #>  $ reporter   : chr  \"Rep A\" \"Rep A\" \"Rep A\" \"Rep A\" ... #>  $ description: chr  NA \"a slightly longer description\" \"a slightly longer description\" \"short description\" ... #>  $ date       : chr  \"2020-01-18\" \"2022-11-19\" \"2020-06-15\" \"2021-12-21\" ... #>  $ values     : int  151 916 638 835 172 274 975 242 829 321 ..."},{"path":"https://peernisse.github.io/edxtras/articles/edxtras.html","id":"hypothetical-validation-requirements","dir":"Articles","previous_headings":"Example use case","what":"Hypothetical validation requirements","title":"edxtras","text":"Dataset 1 zipcodes empty exactly 5 characters lattitudes empty positive longitudes empty negative post office city empty form “City, ST” State abbreviation empty exactly 2 characters Dataset 2 Description empty alpha-numeric Date future Values positive","code":""},{"path":"https://peernisse.github.io/edxtras/articles/edxtras.html","id":"create-list-of-validation-functions-for-each-dataset","dir":"Articles","previous_headings":"Example use case","what":"Create list of validation functions for each dataset","title":"edxtras","text":"key element using edxtras package validRules S3 class. creates named list class validRules create custom validation functions data use case. Validation rules : Return TRUE/FALSE named list correspond vector column names rule designed validate","code":""},{"path":"https://peernisse.github.io/edxtras/articles/edxtras.html","id":"create-rules-for-validation-requirements","dir":"Articles","previous_headings":"Example use case","what":"Create rules for validation requirements","title":"edxtras","text":"Let’s use validRules() create validation functions datasets want define logic applied element dataframe column return TRUE FALSE whether value passes rule. Dataset 1 construct named list validation functions. names functions correspond column names df1. Dataset 2 construct named list validation functions. names functions correspond column names df2. use addRules() add another group rules (ruleset) projectValidationRules object.","code":"# Create named list of functions that check the requirements   df1Rules <- list(     'zipcode' = function(x) !is.na(x) & nchar(x) == 5,     'lat' = function(x) !is.na(x) & x > 0,     'lng' = function(x) !is.na(x) & x < 0,     'post_office_city' = function(x) !is.na(x) & grepl('^[A-Za-z]+,[ ]?[A-Za-z]+{2,}$', x),     'state' = function(x) !is.na(x) & nchar(x) == 2 )  # Add the `df1Rules` list as a ruleset named \"df1Rules\" to a new validRules() object  projectValidationRules <- validRules(df1Rules, ruleset = 'df1Rules') projectValidationRules #> # A tibble: 5 × 3 #>   Ruleset  Name             Rule                                                 #>   <chr>    <chr>            <chr>                                                #> 1 df1Rules zipcode          function(x) !is.na(x) & nchar(x) == 5                #> 2 df1Rules lat              function(x) !is.na(x) & x > 0                        #> 3 df1Rules lng              function(x) !is.na(x) & x < 0                        #> 4 df1Rules post_office_city function(x) !is.na(x) & grepl('^[A-Za-z]+,[ ]?[A-Za… #> 5 df1Rules state            function(x) !is.na(x) & nchar(x) == 2 # Create named list of functions that check the requirements   df2Rules <- list(     'description' = function(x) !is.na(x) & x != \"\" & grepl('^[A-Za-z]', x),     'date' = function(x) as.Date(x) <= Sys.Date(),     'values' = function(x) x >= 0 )  # Add the `df2Rules` list as a ruleset named \"df2Rules\" to `projectValidationRules`  projectValidationRules <- projectValidationRules %>%      addRules(., df2Rules, 'df2Rules') projectValidationRules #> # A tibble: 8 × 3 #>   Ruleset  Name             Rule                                                 #>   <chr>    <chr>            <chr>                                                #> 1 df1Rules zipcode          \"function(x) !is.na(x) & nchar(x) == 5\"              #> 2 df1Rules lat              \"function(x) !is.na(x) & x > 0\"                      #> 3 df1Rules lng              \"function(x) !is.na(x) & x < 0\"                      #> 4 df1Rules post_office_city \"function(x) !is.na(x) & grepl('^[A-Za-z]+,[ ]?[A-Z… #> 5 df1Rules state            \"function(x) !is.na(x) & nchar(x) == 2\"              #> 6 df2Rules description      \"function(x) !is.na(x) & x != \\\"\\\" & grepl('^[A-Za-… #> 7 df2Rules date             \"function(x) as.Date(x) <= Sys.Date()\"               #> 8 df2Rules values           \"function(x) x >= 0\""},{"path":"https://peernisse.github.io/edxtras/articles/edxtras.html","id":"apply-validation-rules-to-the-data","dir":"Articles","previous_headings":"Example use case","what":"Apply validation rules to the data","title":"edxtras","text":"Let’s use validateDF() summarize percent values column passing validation.","code":"# Validate df1 - returns percent valid  scoreDF1 <- validateDF(df1, projectValidationRules, 'df1Rules') scoreDF1 #> # A tibble: 1 × 5 #>   zipcode   lat   lng post_office_city state #>     <dbl> <dbl> <dbl>            <dbl> <dbl> #> 1     100  79.1    79             60.4   100  # Validate df2 - returns percent valid  scoreDF2 <- validateDF(df2, projectValidationRules, 'df2Rules') scoreDF2 #> # A tibble: 1 × 4 #>   reporter description  date values #>      <dbl>       <dbl> <dbl>  <dbl> #> 1       NA        67.7  93.5   90.3"},{"path":"https://peernisse.github.io/edxtras/articles/edxtras.html","id":"summarize-validity-and-completeness","dir":"Articles","previous_headings":"Example use case","what":"Summarize validity and completeness","title":"edxtras","text":"Let’s use makeValidData() evaluate percent completeness validity specific group. Let’s use makeValidData() purrr::map_df() summarize percent completeness validity groups.","code":"# Evaluate percent completeness (not empty) and validity (passes column rule)  # by a grouping column (e.g., state) and filter value (e.g., TX)  makeValidData(df1,      indexCol = 'state',      filtRep = 'TX',      rulesObj = projectValidationRules,      ruleset = 'df1Rules' ) #> # A tibble: 2 × 6 #>   state metric       zipcode   lat   lng post_office_city #>   <fct> <chr>          <dbl> <dbl> <dbl>            <dbl> #> 1 TX    Completeness     100  72.8  72.8             72.8 #> 2 TX    Validity         100  72.8  72.8             57.5  makeValidData(df2,      indexCol = 'reporter',      filtRep = 'Rep A',      rulesObj = projectValidationRules,      ruleset = 'df2Rules' ) #> # A tibble: 2 × 5 #>   reporter metric       description  date values #>   <fct>    <chr>              <dbl> <dbl>  <dbl> #> 1 Rep A    Completeness        67.2 100    100   #> 2 Rep A    Validity            67.2  94.2   90.9 # Use `purrr::map_df()` to summarize by the groups  states <- sort(unique(df1$state)) purrr::map_df(states, ~      makeValidData(df1,          indexCol = 'state',          filtRep = .x,          rulesObj = projectValidationRules,          ruleset = 'df1Rules'     )            ) #> # A tibble: 104 × 6 #>    state metric       zipcode   lat   lng post_office_city #>    <fct> <chr>          <dbl> <dbl> <dbl>            <dbl> #>  1 AK    Completeness     100  86.9  86.9             86.9 #>  2 AK    Validity         100  86.9  86.5             62.4 #>  3 AL    Completeness     100  76.5  76.5             76.5 #>  4 AL    Validity         100  76.5  76.5             65.1 #>  5 AR    Completeness     100  83.2  83.2             83.2 #>  6 AR    Validity         100  83.2  83.2             64.4 #>  7 AZ    Completeness     100  71.3  71.3             71.3 #>  8 AZ    Validity         100  71.3  71.3             55.1 #>  9 CA    Completeness     100  66.4  66.4             66.4 #> 10 CA    Validity         100  66.4  66.4             38.2 #> # ℹ 94 more rows  reps <- sort(unique(df2$reporter)) purrr::map_df(reps, ~      makeValidData(df2,          indexCol = 'reporter',          filtRep = .x,          rulesObj = projectValidationRules,          ruleset = 'df2Rules'     )            ) #> # A tibble: 6 × 5 #>   reporter metric       description  date values #>   <fct>    <chr>              <dbl> <dbl>  <dbl> #> 1 Rep A    Completeness        67.2 100    100   #> 2 Rep A    Validity            67.2  94.2   90.9 #> 3 Rep B    Completeness        69.7 100    100   #> 4 Rep B    Validity            69.7  92.8   88.7 #> 5 Rep C    Completeness        66.3 100    100   #> 6 Rep C    Validity            66.3  93.5   91.2"},{"path":"https://peernisse.github.io/edxtras/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter EerNisse. Author, maintainer.","code":""},{"path":"https://peernisse.github.io/edxtras/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"EerNisse P (2024). edxtras: Validation Functions EDX Datasets. R package version 1.1.0, https://peernisse.github.io/edxtras/.","code":"@Manual{,   title = {edxtras: Validation Functions for EDX Datasets},   author = {Peter EerNisse},   year = {2024},   note = {R package version 1.1.0},   url = {https://peernisse.github.io/edxtras/}, }"},{"path":"https://peernisse.github.io/edxtras/index.html","id":"edxtras","dir":"","previous_headings":"","what":"Validation Functions for EDX Datasets","title":"Validation Functions for EDX Datasets","text":"package supports data validation quality control monitoring electronic data exchange (EDX) programs. functions herein designed help validate data sets coming laboratories health clinics (e.g., hospitals), though can applied anywhere routine data validation implemented R.","code":""},{"path":"https://peernisse.github.io/edxtras/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Validation Functions for EDX Datasets","text":"package currently CRAN. can install edxtras like :","code":"library(remotes) remotes::install_github(\"peernisse/edxtras\")"},{"path":"https://peernisse.github.io/edxtras/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Validation Functions for EDX Datasets","text":"edxtras package developed Utah Department Health Human Services (DHHS), Division Population Health Informatics Program (DPHIP). Functions package developed aid ongoing validation laboratory health clinic data reported assess reporter compliance public health reporting regulations, namely, Utah Admin. Code R386-702, Communicable Disease Rule.","code":""},{"path":"https://peernisse.github.io/edxtras/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Validation Functions for EDX Datasets","text":"can report bug issues link can submit pull request link","code":""},{"path":"https://peernisse.github.io/edxtras/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Validation Functions for EDX Datasets","text":"example using several edxtras validation functions 10M row DF:","code":"# Make dataframe of 10 million rows and use custom rules ----  n <- 10000000 set.seed(42) myDF <- data.frame(     'numbers' = sample(c(84121,85236,65987,NA_real_), n, replace = TRUE),     'chars' = sample(c('word','sentence of words', 'Bob', '42', '1111'), n, replace = TRUE),     'dates' = sample(seq.Date(as.Date('2021-01-01'), Sys.Date() + 100, 'days'), n, replace = TRUE) ) head(myDF) str(myDF)  # Hypothetical validation requirements ----     ## Find missing numbers in \"numbers\"     ## Find numeric characters in \"chars\"     ## Find dates older than 2 years or any dates in the future in \"dates\"  # Set up named list of rules ----  rules <- list(     'numbers' = function(x) is.na(as.numeric(x)),     'chars' = function(x) grepl('[^0-9]', x),     'dates' = function(x) {!is.na(as.POSIXct(x, format = \"%m/%d/%Y\")) &              as.POSIXct(x, format = \"%m/%d/%Y\") <= as.POSIXct(Sys.Date()) &              as.POSIXct(x, format = \"%m/%d/%Y\") > as.POSIXct(Sys.Date() - 2*365)} )  # Create validation rules list with validRules() ----  ?edxtras::validRules myNewRules <- validRules(rules, ruleset = 'myCustomRules') print(myNewRules) as.data.frame(myNewRules)  # Validate a single column returns percent TRUE----  ?edxtras::validateColumn validateColumn(df = myDF, col = 'numbers', rulesObj = myNewRules, ruleset = 'myCustomRules') validateColumn(df = myDF, col = 'chars', rulesObj = myNewRules, ruleset = 'myCustomRules') validateColumn(df = myDF, col = 'dates', rulesObj = myNewRules, ruleset = 'myCustomRules')  # Validate the dataframe returns percent TRUE in each column (NA if no rule/column name match) ----  ?edxtras::validateDF validateDF(df = myDF, rulesObj = myNewRules, ruleset = 'myCustomRules') system.time(     validateDF(df = myDF, rulesObj = myNewRules, ruleset = 'myCustomRules') )  # Validate dataframe for completeness and validity ---- ## Add a grouping column to loop on  myDF$Groups <- c(rep('A', n*.05), rep('B', n*.05), rep('C', n*.9))  head(myDF) table(myDF$Groups)  ?edxtras::makeValidData makeValidData(df = myDF, indexCol = 'Groups', filtRep = 'A',      rulesObj = myNewRules, ruleset = 'myCustomRules' )  system.time(     makeValidData(df = myDF, indexCol = 'Groups', filtRep = 'A',          rulesObj = myNewRules, ruleset = 'myCustomRules'     ) )  ## With for loop ----  output <- data.frame()  system.time(     for(i in unique(myDF$Groups)){         out <- makeValidData(df = myDF, indexCol = 'Groups', filtRep = i,              rulesObj = myNewRules, ruleset = 'myCustomRules'         )                  output <- rbind(output, out)     } )     output  ## With purrr::map_df() ----  grps <- unique(myDF$Groups) system.time(     output <- purrr::map_df(seq_along(grps), ~          makeValidData(df = myDF, indexCol = 'Groups', filtRep = grps[[.x]],              rulesObj = myNewRules, ruleset = 'myCustomRules'         )                        ) ) output"},{"path":"https://peernisse.github.io/edxtras/index.html","id":"contact-info","dir":"","previous_headings":"","what":"Contact Info","title":"Validation Functions for EDX Datasets","text":"package maintained Utah DHHS DPHIP Staff EDX Team","code":""},{"path":"https://peernisse.github.io/edxtras/reference/addRules.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Rules to a Validation Rules List — addRules","title":"Add Rules to a Validation Rules List — addRules","text":"Generic add items S3 list vector","code":""},{"path":"https://peernisse.github.io/edxtras/reference/addRules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Rules to a Validation Rules List — addRules","text":"","code":"addRules(x, y, ruleset = \"default\")"},{"path":"https://peernisse.github.io/edxtras/reference/addRules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Rules to a Validation Rules List — addRules","text":"x Named List vector object add y Named List vector append x ruleset Character Name rule set add rules x. present, created.","code":""},{"path":[]},{"path":"https://peernisse.github.io/edxtras/reference/addRules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Rules to a Validation Rules List — addRules","text":"","code":"# Add rule to default  rulesObj <- validRules() rulesObj <- rulesObj %>%      addRules(list('newrule' = function(x) x =='B'), ruleset = 'newRuleSet')      str(rulesObj) #> List of 2 #>  $ default   :List of 33 #>   ..$ firstname        :function (x)   #>   ..$ lastname         :function (x)   #>   ..$ dob              :function (x)   #>   ..$ street           :function (x)   #>   ..$ city             :function (x)   #>   ..$ state            :function (x)   #>   ..$ zipcode          :function (x)   #>   ..$ phone            :function (x)   #>   ..$ race             :function (x)   #>   ..$ ethnicity        :function (x)   #>   ..$ gender           :function (x)   #>   ..$ pregnancy        :function (x)   #>   ..$ reportingagency  :function (x)   #>   ..$ diagnosticstreet :function (x)   #>   ..$ diagnosticcity   :function (x)   #>   ..$ diagnosticstate  :function (x)   #>   ..$ diagnosticzip    :function (x)   #>   ..$ facility_street  :function (x)   #>   ..$ facility_city    :function (x)   #>   ..$ facility_state   :function (x)   #>   ..$ facility_zip     :function (x)   #>   ..$ clinician        :function (x)   #>   ..$ clinicianphone   :function (x)   #>   ..$ providerphone    :function (x)   #>   ..$ visit_date       :function (x)   #>   ..$ performinglab    :function (x)   #>   ..$ testresult       :function (x)   #>   ..$ datetested       :function (x)   #>   ..$ collectiondate   :function (x)   #>   ..$ datereported     :function (x)   #>   ..$ localTestValid   :function (x)   #>   ..$ clinicianfacility:function (x)   #>   ..$ discharge_date   :function (x)   #>  $ newRuleSet:List of 1 #>   ..$ newrule:function (x)   #>   .. ..- attr(*, \"srcref\")= 'srcref' int [1:8] 4 31 4 49 31 49 4 4 #>   .. .. ..- attr(*, \"srcfile\")=Classes 'srcfilecopy', 'srcfile' <environment: 0x560eed182be0>  #>  - attr(*, \"class\")= chr \"validRules\""},{"path":"https://peernisse.github.io/edxtras/reference/editRules.html","id":null,"dir":"Reference","previous_headings":"","what":"Edit Rules in a Validation Rules List — editRules","title":"Edit Rules in a Validation Rules List — editRules","text":"Generic edit items S3 list vector","code":""},{"path":"https://peernisse.github.io/edxtras/reference/editRules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edit Rules in a Validation Rules List — editRules","text":"","code":"editRules(x, ruleset = \"default\", newrules)"},{"path":"https://peernisse.github.io/edxtras/reference/editRules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edit Rules in a Validation Rules List — editRules","text":"x List class validRules containing named rules edit ruleset Character Name rule set edit rules newrules List Named list functions replace old functions . newrules names present, updated. present, ignored.","code":""},{"path":[]},{"path":"https://peernisse.github.io/edxtras/reference/editRules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edit Rules in a Validation Rules List — editRules","text":"","code":"n <- 100 myDF <- data.frame(     'numbers' = sample(c(84121,85236,65987,NA_real_), n, replace = TRUE),     'chars' = sample(c('word','sentence of words', 'Bob', '42', '1111'), n, replace = TRUE),     'dates' = sample(seq.Date(as.Date('2021-01-01'), Sys.Date() + 100, 'days'), n, replace = TRUE) )  # Hypothetical validation requirements ----    ## Find missing numbers in \"numbers\"        ## Find numeric characters in \"chars\"        ## Find dates older than 2 years or any dates in the future in \"dates\"  # Set up named list of rules ----  rules <- list(     'numbers' = function(x) is.na(as.numeric(x)),     'chars' = function(x) grepl('[^0-9]', x),     'dates' = function(x) {!is.na(as.POSIXct(x, format = \"%m/%d/%Y\")) &          as.POSIXct(x, format = \"%m/%d/%Y\") <= as.POSIXct(Sys.Date()) &          as.POSIXct(x, format = \"%m/%d/%Y\") > as.POSIXct(Sys.Date() - 2*365)} )  # Create class `validRules` ruleset ----  myRules <- validRules(rules, ruleset = 'myRuleset')  validateDF(myDF, rulesObj = myRules, ruleset = 'myRuleset') #> # A tibble: 1 × 3 #>   numbers chars dates #>     <dbl> <dbl> <dbl> #> 1      21    58    56  # Change some rules ----  myRules <- editRules(x = myRules, ruleset = 'myRuleset',     newrules = list(         'chars' = function(x) x == 'Bob',         'notpresentrule' = function(x) x > 7000     )                      ) #> Ignoring unmatched rule names: notpresentrule  validateDF(myDF, rulesObj = myRules, ruleset = 'myRuleset') #> # A tibble: 1 × 3 #>   numbers chars dates #>     <dbl> <dbl> <dbl> #> 1      21    19    56"},{"path":"https://peernisse.github.io/edxtras/reference/makeTimeCols.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert year, month, week columns based on an index date column — makeTimeCols","title":"Insert year, month, week columns based on an index date column — makeTimeCols","text":"Adds year month week columns dataframe based index date column","code":""},{"path":"https://peernisse.github.io/edxtras/reference/makeTimeCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert year, month, week columns based on an index date column — makeTimeCols","text":"","code":"makeTimeCols(df, index_col, date_format = \"%Y-%m-%d\")"},{"path":"https://peernisse.github.io/edxtras/reference/makeTimeCols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert year, month, week columns based on an index date column — makeTimeCols","text":"df dataframe modify index_col Date column dates index . character coerced Date date_format Character format argument .Date() see ?.Date","code":""},{"path":"https://peernisse.github.io/edxtras/reference/makeValidData.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce summary table of completeness and validity for variables in a dataframe — makeValidData","title":"Produce summary table of completeness and validity for variables in a dataframe — makeValidData","text":"Runs completeness validity calculations input dataframe df. Filters data reporter reduce process time. Use map() run multiple reporters","code":""},{"path":"https://peernisse.github.io/edxtras/reference/makeValidData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce summary table of completeness and validity for variables in a dataframe — makeValidData","text":"","code":"makeValidData(   df,   indexCol = \"reporter\",   filtRep,   rulesObj = NULL,   ruleset = \"default\" )"},{"path":"https://peernisse.github.io/edxtras/reference/makeValidData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce summary table of completeness and validity for variables in a dataframe — makeValidData","text":"df dataframe whose column values subjected validation rules via switch() indexCol column filter . contain values given `filtRep` filtRep Character length 1 vector value filter rulesObj List Named list validation functions ruleset Character Grouping name custom ruleset. calculation (e.g., input$filtRep checkboxGroup reporter names)","code":""},{"path":"https://peernisse.github.io/edxtras/reference/makeValidData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce summary table of completeness and validity for variables in a dataframe — makeValidData","text":"Tibble columns input DF, plus column \"metric\", 2 rows: Completeness percentage validity percentage","code":""},{"path":[]},{"path":"https://peernisse.github.io/edxtras/reference/makeValidData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce summary table of completeness and validity for variables in a dataframe — makeValidData","text":"","code":"df <- data.frame('myindex' = c('Bob','Bob','Larry'), 'lastname' = c('AAA','BBB','CCC'), 'gender' = c('Male','Female','M A L E'), 'norule' = c('A','B','C')) makeValidData(df, indexCol = 'myindex', filtRep = 'Bob') #> # A tibble: 2 × 5 #>   myindex metric       lastname gender norule #>   <fct>   <chr>           <dbl>  <dbl>  <dbl> #> 1 Bob     Completeness      100    100    100 #> 2 Bob     Validity          100    100     NA makeValidData(df, indexCol = 'myindex', filtRep = 'Larry') #> # A tibble: 2 × 5 #>   myindex metric       lastname gender norule #>   <fct>   <chr>           <dbl>  <dbl>  <dbl> #> 1 Larry   Completeness      100    100    100 #> 2 Larry   Validity          100      0     NA reps <- c('Bob', 'Larry') purrr::map_df(reps, ~ makeValidData(df, indexCol = 'myindex', filtRep = .x)) #> # A tibble: 4 × 5 #>   myindex metric       lastname gender norule #>   <fct>   <chr>           <dbl>  <dbl>  <dbl> #> 1 Bob     Completeness      100    100    100 #> 2 Bob     Validity          100    100     NA #> 3 Larry   Completeness      100    100    100 #> 4 Larry   Validity          100      0     NA"},{"path":"https://peernisse.github.io/edxtras/reference/nameEmptyCols.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the dataframe names of columns which are all NA — nameEmptyCols","title":"Get the dataframe names of columns which are all NA — nameEmptyCols","text":"Returns names dataframe columns NA/NULL.","code":""},{"path":"https://peernisse.github.io/edxtras/reference/nameEmptyCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the dataframe names of columns which are all NA — nameEmptyCols","text":"","code":"nameEmptyCols(df)"},{"path":"https://peernisse.github.io/edxtras/reference/nameEmptyCols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the dataframe names of columns which are all NA — nameEmptyCols","text":"df dataframe check. Attempts coerce df.","code":""},{"path":"https://peernisse.github.io/edxtras/reference/nameEmptyCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the dataframe names of columns which are all NA — nameEmptyCols","text":"Character vector dataframe names","code":""},{"path":"https://peernisse.github.io/edxtras/reference/nameEmptyCols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the dataframe names of columns which are all NA — nameEmptyCols","text":"","code":"df <- iris df$Sepal.Width <- NA nameEmptyCols(df) #> [1] \"Sepal.Width\" df$Petal.Width <- NA empty <- nameEmptyCols(df) empty #> [1] \"Sepal.Width\" \"Petal.Width\" df[!names(df) %in% nameEmptyCols(df)] #>     Sepal.Length Petal.Length    Species #> 1            5.1          1.4     setosa #> 2            4.9          1.4     setosa #> 3            4.7          1.3     setosa #> 4            4.6          1.5     setosa #> 5            5.0          1.4     setosa #> 6            5.4          1.7     setosa #> 7            4.6          1.4     setosa #> 8            5.0          1.5     setosa #> 9            4.4          1.4     setosa #> 10           4.9          1.5     setosa #> 11           5.4          1.5     setosa #> 12           4.8          1.6     setosa #> 13           4.8          1.4     setosa #> 14           4.3          1.1     setosa #> 15           5.8          1.2     setosa #> 16           5.7          1.5     setosa #> 17           5.4          1.3     setosa #> 18           5.1          1.4     setosa #> 19           5.7          1.7     setosa #> 20           5.1          1.5     setosa #> 21           5.4          1.7     setosa #> 22           5.1          1.5     setosa #> 23           4.6          1.0     setosa #> 24           5.1          1.7     setosa #> 25           4.8          1.9     setosa #> 26           5.0          1.6     setosa #> 27           5.0          1.6     setosa #> 28           5.2          1.5     setosa #> 29           5.2          1.4     setosa #> 30           4.7          1.6     setosa #> 31           4.8          1.6     setosa #> 32           5.4          1.5     setosa #> 33           5.2          1.5     setosa #> 34           5.5          1.4     setosa #> 35           4.9          1.5     setosa #> 36           5.0          1.2     setosa #> 37           5.5          1.3     setosa #> 38           4.9          1.4     setosa #> 39           4.4          1.3     setosa #> 40           5.1          1.5     setosa #> 41           5.0          1.3     setosa #> 42           4.5          1.3     setosa #> 43           4.4          1.3     setosa #> 44           5.0          1.6     setosa #> 45           5.1          1.9     setosa #> 46           4.8          1.4     setosa #> 47           5.1          1.6     setosa #> 48           4.6          1.4     setosa #> 49           5.3          1.5     setosa #> 50           5.0          1.4     setosa #> 51           7.0          4.7 versicolor #> 52           6.4          4.5 versicolor #> 53           6.9          4.9 versicolor #> 54           5.5          4.0 versicolor #> 55           6.5          4.6 versicolor #> 56           5.7          4.5 versicolor #> 57           6.3          4.7 versicolor #> 58           4.9          3.3 versicolor #> 59           6.6          4.6 versicolor #> 60           5.2          3.9 versicolor #> 61           5.0          3.5 versicolor #> 62           5.9          4.2 versicolor #> 63           6.0          4.0 versicolor #> 64           6.1          4.7 versicolor #> 65           5.6          3.6 versicolor #> 66           6.7          4.4 versicolor #> 67           5.6          4.5 versicolor #> 68           5.8          4.1 versicolor #> 69           6.2          4.5 versicolor #> 70           5.6          3.9 versicolor #> 71           5.9          4.8 versicolor #> 72           6.1          4.0 versicolor #> 73           6.3          4.9 versicolor #> 74           6.1          4.7 versicolor #> 75           6.4          4.3 versicolor #> 76           6.6          4.4 versicolor #> 77           6.8          4.8 versicolor #> 78           6.7          5.0 versicolor #> 79           6.0          4.5 versicolor #> 80           5.7          3.5 versicolor #> 81           5.5          3.8 versicolor #> 82           5.5          3.7 versicolor #> 83           5.8          3.9 versicolor #> 84           6.0          5.1 versicolor #> 85           5.4          4.5 versicolor #> 86           6.0          4.5 versicolor #> 87           6.7          4.7 versicolor #> 88           6.3          4.4 versicolor #> 89           5.6          4.1 versicolor #> 90           5.5          4.0 versicolor #> 91           5.5          4.4 versicolor #> 92           6.1          4.6 versicolor #> 93           5.8          4.0 versicolor #> 94           5.0          3.3 versicolor #> 95           5.6          4.2 versicolor #> 96           5.7          4.2 versicolor #> 97           5.7          4.2 versicolor #> 98           6.2          4.3 versicolor #> 99           5.1          3.0 versicolor #> 100          5.7          4.1 versicolor #> 101          6.3          6.0  virginica #> 102          5.8          5.1  virginica #> 103          7.1          5.9  virginica #> 104          6.3          5.6  virginica #> 105          6.5          5.8  virginica #> 106          7.6          6.6  virginica #> 107          4.9          4.5  virginica #> 108          7.3          6.3  virginica #> 109          6.7          5.8  virginica #> 110          7.2          6.1  virginica #> 111          6.5          5.1  virginica #> 112          6.4          5.3  virginica #> 113          6.8          5.5  virginica #> 114          5.7          5.0  virginica #> 115          5.8          5.1  virginica #> 116          6.4          5.3  virginica #> 117          6.5          5.5  virginica #> 118          7.7          6.7  virginica #> 119          7.7          6.9  virginica #> 120          6.0          5.0  virginica #> 121          6.9          5.7  virginica #> 122          5.6          4.9  virginica #> 123          7.7          6.7  virginica #> 124          6.3          4.9  virginica #> 125          6.7          5.7  virginica #> 126          7.2          6.0  virginica #> 127          6.2          4.8  virginica #> 128          6.1          4.9  virginica #> 129          6.4          5.6  virginica #> 130          7.2          5.8  virginica #> 131          7.4          6.1  virginica #> 132          7.9          6.4  virginica #> 133          6.4          5.6  virginica #> 134          6.3          5.1  virginica #> 135          6.1          5.6  virginica #> 136          7.7          6.1  virginica #> 137          6.3          5.6  virginica #> 138          6.4          5.5  virginica #> 139          6.0          4.8  virginica #> 140          6.9          5.4  virginica #> 141          6.7          5.6  virginica #> 142          6.9          5.1  virginica #> 143          5.8          5.1  virginica #> 144          6.8          5.9  virginica #> 145          6.7          5.7  virginica #> 146          6.7          5.2  virginica #> 147          6.3          5.0  virginica #> 148          6.5          5.2  virginica #> 149          6.2          5.4  virginica #> 150          5.9          5.1  virginica"},{"path":"https://peernisse.github.io/edxtras/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://peernisse.github.io/edxtras/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://peernisse.github.io/edxtras/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://peernisse.github.io/edxtras/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://peernisse.github.io/edxtras/reference/validRules.html","id":null,"dir":"Reference","previous_headings":"","what":"Organize and access validation rules from a list of class `validRules` — validRules","title":"Organize and access validation rules from a list of class `validRules` — validRules","text":"List validation rule functions EDX validation use.  default ruelset EMSA QA2 application. different rules  needed, create named list rules call validRules()  create rules object. See examples.","code":""},{"path":"https://peernisse.github.io/edxtras/reference/validRules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organize and access validation rules from a list of class `validRules` — validRules","text":"","code":"validRules(x = list(), ruleset = \"default\")"},{"path":"https://peernisse.github.io/edxtras/reference/validRules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organize and access validation rules from a list of class `validRules` — validRules","text":"x Named List vector validation rule functions. Names  correspond column names dataframe validated ruleset Character Grouping ruleset group name assign list x.  Multiple rulesets can contained validRUles object. Add new  rulesets `addRules()`. See `?addRules`","code":""},{"path":"https://peernisse.github.io/edxtras/reference/validRules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organize and access validation rules from a list of class `validRules` — validRules","text":"List validation functions named column name validate","code":""},{"path":[]},{"path":"https://peernisse.github.io/edxtras/reference/validRules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organize and access validation rules from a list of class `validRules` — validRules","text":"","code":"df <- data.frame(\"lastname\" = c(\"AAA\", \"BBB\"))  # Use default rules for EMSA QA2 Datasource names(validRules()) #> [1] \"default\" names(validRules()[['default']]) #>  [1] \"firstname\"         \"lastname\"          \"dob\"               #>  [4] \"street\"            \"city\"              \"state\"             #>  [7] \"zipcode\"           \"phone\"             \"race\"              #> [10] \"ethnicity\"         \"gender\"            \"pregnancy\"         #> [13] \"reportingagency\"   \"diagnosticstreet\"  \"diagnosticcity\"    #> [16] \"diagnosticstate\"   \"diagnosticzip\"     \"facility_street\"   #> [19] \"facility_city\"     \"facility_state\"    \"facility_zip\"      #> [22] \"clinician\"         \"clinicianphone\"    \"providerphone\"     #> [25] \"visit_date\"        \"performinglab\"     \"testresult\"        #> [28] \"datetested\"        \"collectiondate\"    \"datereported\"      #> [31] \"localTestValid\"    \"clinicianfacility\" \"discharge_date\"    validRules()[[\"default\"]][[\"lastname\"]] #> function (x)  #> grepl(\"^[a-zA-Z]+[a-zA-Z,\\\\',\\\\- ]*[a-zA-Z ]*?$\", x, perl = TRUE) #> <bytecode: 0x560eed662980> #> <environment: 0x560eebec6a18> validRules()[[\"default\"]][[\"lastname\"]](df$lastname) #> [1] TRUE TRUE  # Create custom rule lists myrules <- list(     'columnname1' = function(x) x + 1,     'columnname2' = function(x) x - 1 )  validRules(myrules) #> # A tibble: 2 × 3 #>   Ruleset Name        Rule              #>   <chr>   <chr>       <chr>             #> 1 default columnname1 function(x) x + 1 #> 2 default columnname2 function(x) x - 1  myRuleSet <- validRules(myrules, ruleset = 'myRulesetName')  myrules2 <- list(     \"ruleset1\" = list(         'columnname1' = function(x) x + 1,         'columnname2' = function(x) x - 1     ),          \"ruleset2\" = list(         'columnname1' = function(x) x + 1,         'columnname2' = function(x) x - 1     ) )  validRules(myrules2) #> # A tibble: 4 × 3 #>   Ruleset  Name        Rule              #>   <chr>    <chr>       <chr>             #> 1 ruleset1 columnname1 function(x) x + 1 #> 2 ruleset1 columnname2 function(x) x - 1 #> 3 ruleset2 columnname1 function(x) x + 1 #> 4 ruleset2 columnname2 function(x) x - 1 validRules(myrules2) %>% addRules(myRuleSet, ruleset = 'myRulesetName') #> # A tibble: 6 × 3 #>   Ruleset       Name        Rule              #>   <chr>         <chr>       <chr>             #> 1 ruleset1      columnname1 function(x) x + 1 #> 2 ruleset1      columnname2 function(x) x - 1 #> 3 ruleset2      columnname1 function(x) x + 1 #> 4 ruleset2      columnname2 function(x) x - 1 #> 5 myRulesetName columnname1 function(x) x + 1 #> 6 myRulesetName columnname2 function(x) x - 1"},{"path":"https://peernisse.github.io/edxtras/reference/validateColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply validation rule from a list of rules to a column based on column name — validateColumn","title":"Apply validation rule from a list of rules to a column based on column name — validateColumn","text":"Runs validation rules specified column dataframe df column name. Returns NA validation rule exists","code":""},{"path":"https://peernisse.github.io/edxtras/reference/validateColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply validation rule from a list of rules to a column based on column name — validateColumn","text":"","code":"validateColumn(df, col, rulesObj = NULL, ruleset = \"default\")"},{"path":"https://peernisse.github.io/edxtras/reference/validateColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply validation rule from a list of rules to a column based on column name — validateColumn","text":"df dataframe whose column values subjected validation rules via switch() col name column validate rulesObj List Named list validation functions ruleset Character Grouping name custom ruleset.","code":""},{"path":"https://peernisse.github.io/edxtras/reference/validateColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply validation rule from a list of rules to a column based on column name — validateColumn","text":"Numeric value percent column values passing validation rule validRules()","code":""},{"path":[]},{"path":"https://peernisse.github.io/edxtras/reference/validateColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply validation rule from a list of rules to a column based on column name — validateColumn","text":"","code":"df <- data.frame('lastname' = c('AAA','BBB','CCC'), 'gender' = c('Male','Female','M A L E')) validateColumn(df, 'lastname') #> [1] 100 validateColumn(df, 'gender') #> [1] 66.7  rulesObj <- validRules() rulesObj <- rulesObj %>% addRules(list('norule' = function(x) x =='B')) validateDF(df, rulesObj = rulesObj) #> # A tibble: 1 × 2 #>   lastname gender #>      <dbl>  <dbl> #> 1      100   66.7"},{"path":"https://peernisse.github.io/edxtras/reference/validateDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply validateColumn and validRUles across a dataframe — validateDF","title":"Apply validateColumn and validRUles across a dataframe — validateDF","text":"Runs validation rules columns dataframe df column name. Returns NA validation rule exists","code":""},{"path":"https://peernisse.github.io/edxtras/reference/validateDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply validateColumn and validRUles across a dataframe — validateDF","text":"","code":"validateDF(df, rulesObj = NULL, ruleset = \"default\")"},{"path":"https://peernisse.github.io/edxtras/reference/validateDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply validateColumn and validRUles across a dataframe — validateDF","text":"df dataframe whose column values subjected validation rules via switch() rulesObj List Named list validation functions ruleset Character Grouping name custom ruleset.","code":""},{"path":"https://peernisse.github.io/edxtras/reference/validateDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply validateColumn and validRUles across a dataframe — validateDF","text":"Single row dataframe validation results columns df","code":""},{"path":[]},{"path":"https://peernisse.github.io/edxtras/reference/validateDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply validateColumn and validRUles across a dataframe — validateDF","text":"","code":"df <- data.frame('lastname' = c('AAA','BBB','CCC'), 'gender' = c('Male','Female','M A L E'), 'norule' = c('A','B','C')) validateDF(df) #> # A tibble: 1 × 3 #>   lastname gender norule #>      <dbl>  <dbl>  <dbl> #> 1      100   66.7     NA rulesObj <- validRules() rulesObj <- rulesObj %>% addRules(list('norule' = function(x) x =='B')) validateDF(df, rulesObj = rulesObj) #> # A tibble: 1 × 3 #>   lastname gender norule #>      <dbl>  <dbl>  <dbl> #> 1      100   66.7   33.3"},{"path":"https://peernisse.github.io/edxtras/reference/zipcodeDB.html","id":null,"dir":"Reference","previous_headings":"","what":"US zipcodes database — zipcodeDB","title":"US zipcodes database — zipcodeDB","text":"dataframe US zipcodes related geographic info","code":""},{"path":"https://peernisse.github.io/edxtras/reference/zipcodeDB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US zipcodes database — zipcodeDB","text":"","code":"zipcodeDB"},{"path":"https://peernisse.github.io/edxtras/reference/zipcodeDB.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"US zipcodes database — zipcodeDB","text":"dataframe 41877 rows 24 variables zipcode US 5-digit zipcodes zipcode_type 2010 State FIPS Code major_city Major city serving ZIP code post_office_city Major city serving ZIP code common_city_list List common cities represented ZIP code county Name county containing ZIP code state Two-digit state code ZIP code location lat Latitude centroid ZIP code lng Longitude centroid ZIP code timezone Timezone ZIP code radius_in_miles Radius ZIP code miles area_code_list List area codes telephone numbers   within ZIP code population Total population ZIP code population_density Population density ZIP   code (persons per square mile) land_area_in_sqmi Area land contained within ZIP code   square miles water_area_in_sqmi Area waters contained within ZIP code   square miles housing_units Number housing units within ZIP code occupied_housing_units Number housing units within ZIP code median_home_value Median home price within ZIP code bounds_west Bounding box coordinates bounds_east Bounding box coordinates bounds_north Bounding box coordinates bounds_south Bounding box coordinates","code":""},{"path":"https://peernisse.github.io/edxtras/reference/zipcodeDB.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"US zipcodes database — zipcodeDB","text":"Taken `zipcodeR` package. package gives new warnings 2023 due reliance deprecated package `sp`. dataset use validation excerpted remove dependency `zipcodeR` package. Raw data source updates: https://github.com/MacHu-GWU/uszipcode-project/files/5183256/simple_db.log zipcodeR package GitHub https://github.com/gavinrozzi/zipcodeR","code":""},{"path":"https://peernisse.github.io/edxtras/reference/zipcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"US Zipcodes list — zipcodes","title":"US Zipcodes list — zipcodes","text":"vector 5 digit US zipcodes use validation","code":""},{"path":"https://peernisse.github.io/edxtras/reference/zipcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US Zipcodes list — zipcodes","text":"","code":"zipcodes"},{"path":"https://peernisse.github.io/edxtras/reference/zipcodes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"US Zipcodes list — zipcodes","text":"Character vector US 5 digit zipcodes","code":""},{"path":"https://peernisse.github.io/edxtras/reference/zipcodes.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"US Zipcodes list — zipcodes","text":"`zipcode` column `zipcodeDB` https://github.com/MacHu-GWU/uszipcode-project/files/5183256/simple_db.log","code":""}]
